
"use client"

export interface DatabaseUser {
  id: string
  name: string
  email: string
  password: string
  isAdmin: boolean
  avatar?: string
  createdAt: Date
  updatedAt: Date
}

export interface DatabasePrompt {
  id: string
  title: string
  description: string
  content: string
  category: string
  price: number
  isPaid: boolean
  isFree: boolean
  isAdminCreated: boolean
  featured: boolean
  authorId: string
  author: string
  authorAvatar: string
  thumbnail: string
  images: string[]
  videoPreview?: string
  tags: string[]
  rating: number
  downloads: number
  views: number
  createdAt: Date
  updatedAt: Date
}

export interface DatabaseCategory {
  id: string
  name: string
  slug: string
  icon: string
  description: string
  count: number
  createdAt: Date
}

export interface DatabaseTag {
  id: string
  name: string
  slug: string
  category: string
  isActive: boolean
  createdAt: Date
}

export interface DatabaseReview {
  id: string
  promptId: string
  userId: string
  userName: string
  userAvatar: string
  rating: number
  comment: string
  isVerifiedPurchase: boolean
  helpfulVotes: number
  reported: boolean
  createdAt: Date
}

export interface DatabasePurchase {
  id: string
  userId: string
  promptId: string
  price: number
  status: "completed" | "pending" | "cancelled"
  createdAt: Date
}

export interface DatabaseBlogPost {
  id: string
  title: string
  slug: string
  excerpt: string
  content: string
  authorId: string
  author: string
  authorAvatar: string
  thumbnail: string
  category: string
  tags: string[]
  published: boolean
  featured: boolean
  views: number
  createdAt: Date
  updatedAt: Date
}

export interface DatabaseFAQ {
  id: string
  question: string
  answer: string
  category: string
  order: number
  isActive: boolean
  createdAt: Date
  updatedAt: Date
}

// Storage keys
const STORAGE_KEYS = {
  USERS: "db_users",
  PROMPTS: "db_prompts", 
  CATEGORIES: "db_categories",
  TAGS: "db_tags",
  REVIEWS: "db_reviews",
  PURCHASES: "db_purchases",
  BLOG_POSTS: "db_blog_posts",
  FAQS: "db_faqs"
}

// Mock data
const mockUsers: DatabaseUser[] = [
  {
    id: "admin-1",
    name: "Admin RePrompt",
    email: "admin@reprompt.com",
    password: "admin123",
    isAdmin: true,
    avatar: "/placeholder-user.jpg",
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  },
  {
    id: "user-1",
    name: "Maria Silva",
    email: "maria@email.com",
    password: "123456",
    isAdmin: false,
    avatar: "/placeholder-user.jpg",
    createdAt: new Date("2024-01-02"),
    updatedAt: new Date("2024-01-02")
  },
  {
    id: "user-2",
    name: "Carlos Otaku",
    email: "carlos@email.com",
    password: "123456",
    isAdmin: false,
    avatar: "/placeholder-user.jpg",
    createdAt: new Date("2024-01-03"),
    updatedAt: new Date("2024-01-03")
  }
]

const mockCategories: DatabaseCategory[] = [
  {
    id: "cat-1",
    name: "Midjourney",
    slug: "midjourney",
    icon: "üé®",
    description: "Prompts para gera√ß√£o de imagens com Midjourney",
    count: 1250,
    createdAt: new Date("2024-01-01")
  },
  {
    id: "cat-2", 
    name: "DALL-E",
    slug: "dalle",
    icon: "üñºÔ∏è",
    description: "Prompts para cria√ß√£o de imagens com DALL-E",
    count: 890,
    createdAt: new Date("2024-01-01")
  },
  {
    id: "cat-3",
    name: "Stable Diffusion",
    slug: "stable-diffusion", 
    icon: "‚ö°",
    description: "Prompts para Stable Diffusion e derivados",
    count: 670,
    createdAt: new Date("2024-01-01")
  },
  {
    id: "cat-4",
    name: "ChatGPT",
    slug: "chatgpt",
    icon: "üí¨",
    description: "Prompts para conversas e assist√™ncia com ChatGPT",
    count: 520,
    createdAt: new Date("2024-01-01")
  }
]

const mockBlogPosts: DatabaseBlogPost[] = [
  {
    id: "post-1",
    title: "Como Criar Prompts Eficazes para IA Generativa",
    slug: "como-criar-prompts-eficazes-ia-generativa",
    excerpt: "Descubra as melhores t√©cnicas para criar prompts que geram resultados impressionantes em IAs como Midjourney, DALL-E e ChatGPT.",
    content: `
# Como Criar Prompts Eficazes para IA Generativa

A cria√ß√£o de prompts eficazes √© uma arte que combina criatividade, precis√£o t√©cnica e compreens√£o profunda de como as IAs interpretam linguagem natural.

## Princ√≠pios Fundamentais

### 1. Seja Espec√≠fico e Detalhado
Quanto mais espec√≠fico for seu prompt, melhores ser√£o os resultados. Em vez de "desenhe um gato", use "gato persa de pelo longo, olhos azuis, sentado em uma janela ensolarada, estilo aquarela".

### 2. Use Descritores de Qualidade
Adicione termos como "ultra detalhado", "4K", "fotorreal√≠stico", "estilo cinematogr√°fico" para elevar a qualidade dos resultados.

### 3. Defina o Estilo Art√≠stico
Especifique o estilo desejado: "estilo Van Gogh", "arte digital", "fotografia profissional", "ilustra√ß√£o minimalista".

## T√©cnicas Avan√ßadas

### Estrutura de Prompt Ideal
1. **Assunto principal** - O que voc√™ quer criar
2. **Detalhes descritivos** - Caracter√≠sticas espec√≠ficas
3. **Ambiente/Cen√°rio** - Onde est√° localizado
4. **Estilo art√≠stico** - Como deve parecer
5. **Par√¢metros t√©cnicos** - Qualidade e formato

### Exemplo Pr√°tico
\`\`\`
professional portrait of elegant woman, 
natural lighting, soft shadows, 
studio photography, 85mm lens,
shallow depth of field,
ultra detailed, 4K resolution
--ar 2:3 --v 6
\`\`\`

## Dicas para Cada Plataforma

### Midjourney
- Use par√¢metros como --ar para propor√ß√£o
- --v 6 para vers√£o mais recente
- --style raw para menos estiliza√ß√£o

### DALL-E
- Seja mais descritivo em linguagem natural
- Funciona bem com conceitos abstratos
- Excelente para ilustra√ß√µes e arte conceitual

### Stable Diffusion
- Use negative prompts para remover elementos indesejados
- Funciona bem com modificadores de peso
- √ìtimo para experimenta√ß√£o com diferentes modelos

## Conclus√£o

A cria√ß√£o de prompts eficazes requer pr√°tica e experimenta√ß√£o. Comece com prompts simples e v√° adicionando complexidade gradualmente at√© alcan√ßar os resultados desejados.
`,
    authorId: "admin-1",
    author: "Admin RePrompt",
    authorAvatar: "/placeholder-user.jpg",
    thumbnail: "/placeholder.svg",
    category: "Tutorial",
    tags: ["prompts", "ia", "tutorial", "midjourney", "dalle"],
    published: true,
    featured: true,
    views: 5420,
    createdAt: new Date("2024-01-15"),
    updatedAt: new Date("2024-01-15")
  },
  {
    id: "post-2", 
    title: "Tend√™ncias em IA Generativa para 2024",
    slug: "tendencias-ia-generativa-2024",
    excerpt: "Explore as principais tend√™ncias e inova√ß√µes que est√£o moldando o futuro da intelig√™ncia artificial generativa em 2024.",
    content: `
# Tend√™ncias em IA Generativa para 2024

O ano de 2024 promete ser revolucion√°rio para a IA generativa, com avan√ßos significativos em qualidade, acessibilidade e aplica√ß√µes pr√°ticas.

## Principais Tend√™ncias

### 1. Modelos Multimodais
A integra√ß√£o entre texto, imagem, v√≠deo e √°udio em um √∫nico modelo est√° se tornando realidade.

### 2. IA Personalizada
Modelos que se adaptam ao estilo e prefer√™ncias individuais de cada usu√°rio.

### 3. Gera√ß√£o de V√≠deo em Tempo Real
Ferramentas que permitem criar v√≠deos de alta qualidade instantaneamente.

### 4. IA para Neg√≥cios
Solu√ß√µes empresariais espec√≠ficas para diferentes setores e ind√∫strias.

## Impacto no Mercado

O mercado de prompts est√° evoluindo rapidamente, com novas oportunidades surgindo para criadores de conte√∫do e empresas.

## Conclus√£o

2024 ser√° um ano definitivo para estabelecer a IA generativa como ferramenta essencial em diversas √°reas profissionais.
`,
    authorId: "user-1",
    author: "Maria Silva", 
    authorAvatar: "/placeholder-user.jpg",
    thumbnail: "/placeholder.svg",
    category: "Tend√™ncias",
    tags: ["ia", "2024", "tendencias", "futuro", "tecnologia"],
    published: true,
    featured: false,
    views: 2340,
    createdAt: new Date("2024-01-10"),
    updatedAt: new Date("2024-01-10")
  }
]

const mockFAQs: DatabaseFAQ[] = [
  {
    id: "faq-1",
    question: "Como funciona o marketplace de prompts?",
    answer: "Nosso marketplace conecta criadores de prompts com usu√°rios que buscam conte√∫do de qualidade para IA. Criadores podem vender seus prompts, enquanto compradores t√™m acesso a uma vasta biblioteca de prompts testados e otimizados.",
    category: "Geral",
    order: 1,
    isActive: true,
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  },
  {
    id: "faq-2",
    question: "Posso vender meus pr√≥prios prompts?",
    answer: "Sim! Qualquer usu√°rio registrado pode se tornar um vendedor. Basta criar uma conta, submeter seus prompts para aprova√ß√£o e come√ßar a vend√™-los. Mantemos padr√µes altos de qualidade para garantir a melhor experi√™ncia para todos.",
    category: "Vendas",
    order: 2, 
    isActive: true,
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  },
  {
    id: "faq-3",
    question: "Qual a comiss√£o cobrada nas vendas?",
    answer: "Cobramos uma comiss√£o de 20% sobre cada venda realizada. Esta taxa nos permite manter a plataforma funcionando, processar pagamentos com seguran√ßa e oferecer suporte cont√≠nuo aos usu√°rios.",
    category: "Vendas",
    order: 3,
    isActive: true,
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  },
  {
    id: "faq-4",
    question: "Como garantir a qualidade dos prompts?",
    answer: "Todos os prompts passam por um processo de revis√£o antes de serem publicados. Nossa equipe testa cada prompt e verifica se produz os resultados prometidos. Al√©m disso, temos um sistema de avalia√ß√µes e coment√°rios dos usu√°rios.",
    category: "Qualidade",
    order: 4,
    isActive: true,
    createdAt: new Date("2024-01-01"), 
    updatedAt: new Date("2024-01-01")
  },
  {
    id: "faq-5",
    question: "Posso solicitar reembolso?",
    answer: "Oferecemos garantia de satisfa√ß√£o de 7 dias. Se um prompt n√£o atender √†s suas expectativas ou n√£o funcionar conforme descrito, voc√™ pode solicitar reembolso total dentro deste per√≠odo.",
    category: "Pagamentos",
    order: 5,
    isActive: true,
    createdAt: new Date("2024-01-01"),
    updatedAt: new Date("2024-01-01")
  }
]

// Generic database functions
function getFromStorage<T>(key: string, defaultData: T[]): T[] {
  if (typeof window === "undefined") return defaultData
  
  try {
    const stored = localStorage.getItem(key)
    if (stored) {
      const parsed = JSON.parse(stored)
      return parsed.map((item: any) => ({
        ...item,
        createdAt: new Date(item.createdAt),
        updatedAt: item.updatedAt ? new Date(item.updatedAt) : new Date(item.createdAt)
      }))
    }
    
    saveToStorage(key, defaultData)
    return defaultData
  } catch (error) {
    console.error(`Erro ao carregar ${key}:`, error)
    return defaultData
  }
}

function saveToStorage<T>(key: string, data: T[]): void {
  if (typeof window !== "undefined") {
    try {
      localStorage.setItem(key, JSON.stringify(data))
    } catch (error) {
      console.error(`Erro ao salvar ${key}:`, error)
    }
  }
}

// Users
export const getUsers = (): DatabaseUser[] => getFromStorage(STORAGE_KEYS.USERS, mockUsers)
export const saveUsers = (users: DatabaseUser[]): void => saveToStorage(STORAGE_KEYS.USERS, users)
export const getUserById = (id: string): DatabaseUser | undefined => getUsers().find(u => u.id === id)
export const getUserByEmail = (email: string): DatabaseUser | undefined => getUsers().find(u => u.email === email)

// Categories  
export const getCategories = (): DatabaseCategory[] => getFromStorage(STORAGE_KEYS.CATEGORIES, mockCategories)
export const saveCategories = (categories: DatabaseCategory[]): void => saveToStorage(STORAGE_KEYS.CATEGORIES, categories)

// Blog Posts
export const getBlogPosts = (): DatabaseBlogPost[] => getFromStorage(STORAGE_KEYS.BLOG_POSTS, mockBlogPosts)
export const saveBlogPosts = (posts: DatabaseBlogPost[]): void => saveToStorage(STORAGE_KEYS.BLOG_POSTS, posts)
export const getBlogPostBySlug = (slug: string): DatabaseBlogPost | undefined => getBlogPosts().find(p => p.slug === slug)
export const getFeaturedBlogPosts = (): DatabaseBlogPost[] => getBlogPosts().filter(p => p.published && p.featured)

// FAQs
export const getFAQs = (): DatabaseFAQ[] => getFromStorage(STORAGE_KEYS.FAQS, mockFAQs)
export const saveFAQs = (faqs: DatabaseFAQ[]): void => saveToStorage(STORAGE_KEYS.FAQS, faqs)
export const getFAQsByCategory = (category: string): DatabaseFAQ[] => 
  getFAQs().filter(f => f.isActive && f.category === category).sort((a, b) => a.order - b.order)

// Initialize database
export const initializeDatabase = (): void => {
  getUsers()
  getCategories()
  getBlogPosts() 
  getFAQs()
}
